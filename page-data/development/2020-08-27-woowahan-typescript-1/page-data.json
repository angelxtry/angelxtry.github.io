{"componentChunkName":"component---src-templates-blog-post-js","path":"/development/2020-08-27-woowahan-typescript-1/","result":{"data":{"site":{"siteMetadata":{"title":"TIL","author":"[Suho]","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"angelxtry/blog-comment"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"550fa800-70a6-56cf-9aa4-d940175b0b10","excerpt":"세미나 일자: 2020-08-26 발표 공고가 나왔을 때부터 두근두근하며 기다렸다. 타입스크립트를 사용하고는 있지만, 잘 사용하는지, 어떻게 하면 더 잘 사용할 수 있을지, 다른 회사들은 어떻게 쓰고 있는지가 항상 궁금했었다. 이번 세미나가 그런 갈증을 조금이나마 해소해줄 수 있었던 것 같다. 영상은 며칠 내로 유트브에 공개된다고 한다. 발표자료를 토대로 필요한 내용만 정리해보자. 1부 타입시스템을 올바르게 사용하는 법…","html":"<p>세미나 일자: 2020-08-26</p>\n<p>발표 공고가 나왔을 때부터 두근두근하며 기다렸다.</p>\n<p>타입스크립트를 사용하고는 있지만, 잘 사용하는지, 어떻게 하면 더 잘 사용할 수 있을지, 다른 회사들은 어떻게 쓰고 있는지가 항상 궁금했었다.</p>\n<p>이번 세미나가 그런 갈증을 조금이나마 해소해줄 수 있었던 것 같다.</p>\n<p>영상은 며칠 내로 유트브에 공개된다고 한다. 발표자료를 토대로 필요한 내용만 정리해보자.</p>\n<h2 id=\"1부-타입시스템을-올바르게-사용하는-법\"><a href=\"#1%EB%B6%80-%ED%83%80%EC%9E%85%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%84-%EC%98%AC%EB%B0%94%EB%A5%B4%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B2%95\" aria-label=\"1부 타입시스템을 올바르게 사용하는 법 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1부 타입시스템을 올바르게 사용하는 법</h2>\n<h3 id=\"1-작성자와-사용자\"><a href=\"#1-%EC%9E%91%EC%84%B1%EC%9E%90%EC%99%80-%EC%82%AC%EC%9A%A9%EC%9E%90\" aria-label=\"1 작성자와 사용자 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 작성자와 사용자</h3>\n<blockquote>\n<p>타입 시스템</p>\n<ul>\n<li>컴파일러에게 사용하는 타입을 명시적으로 지정하는 시스템</li>\n<li>컴파일러가 자동으로 타입을 추론하는 시스템</li>\n</ul>\n</blockquote>\n<p>타입을 사용하면서 타입 시스템의 정의가 뭔지 깊게 생각해본 적이 없었다.</p>\n<p>단지 타입을 강제해서 오류를 줄일 수 있다는 것만 막연하게 생각했었다.</p>\n<p>그래서 이런 정의가 신선하면서도 명쾌하게 느껴졌다.</p>\n<blockquote>\n<p><code class=\"language-text\">noImplicitAny</code> 옵션을 켜면</p>\n<p>타입을 명시적으로 저장하지 않은 경우</p>\n<p>타입스크립트가 추론 중 <code class=\"language-text\">any</code>라고 판단하게 되면</p>\n<p>컴파일 에러를 발생시켜</p>\n<p>명시적으로 지정하도록 유도한다.</p>\n</blockquote>\n<p>이번 세미나에서 얻은 소득 중 첫 번째가 tsconfig의 명쾌한 설명이다.</p>\n<p>막연하게 알고 있었던 항목들을 분명하게 이해하게 됐다.</p>\n<blockquote>\n<p><code class=\"language-text\">strictNullChecks</code> 옵션을 켜면</p>\n<p>모든 타입에 자동으로 포함되어 있는</p>\n<p><code class=\"language-text\">null</code>과 <code class=\"language-text\">undefined</code>를 제거해준다.</p>\n</blockquote>\n<blockquote>\n<p><code class=\"language-text\">noImplicitReturns</code> 옵션을 켜면</p>\n<p>함수 내엣 모든 코드가 값을 리턴하지 않으면,</p>\n<p>컴파일 에러를 발생시킨다.</p>\n</blockquote>\n<p>모든 코드에서 명시적으로 리턴 타입을 지정하자!</p>\n<hr>\n<h3 id=\"2-interface와-type-alias\"><a href=\"#2-interface%EC%99%80-type-alias\" aria-label=\"2 interface와 type alias permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. interface와 type alias</h3>\n<p><code class=\"language-text\">structural type system</code> - 구조가 같은면 같은 타입이다.</p>\n<p><code class=\"language-text\">nominal type system</code> - 구조가 같아도 이름이 다르면 다른 타입이다.</p>\n<p>타입스크립트의 타입 시스템은 <code class=\"language-text\">structural type system</code>이다.</p>\n<p>하지만 <code class=\"language-text\">nominal type system</code>을 사용하고자 하면 구현할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> find <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> PersonId <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">readonly</span> brand<span class=\"token punctuation\">:</span> unique <span class=\"token builtin\">symbol</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">PersonId</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> PersonId <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> id <span class=\"token keyword\">as</span> PersonId<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token punctuation\">:</span> PersonId<span class=\"token punctuation\">;</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getPersonById</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">:</span> PersonId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> data<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      id<span class=\"token punctuation\">:</span> <span class=\"token function\">PersonId</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aaa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token punctuation\">:</span> <span class=\"token string\">'aaa'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      id<span class=\"token punctuation\">:</span> <span class=\"token function\">PersonId</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bbb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token punctuation\">:</span> <span class=\"token string\">'bbb'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      id<span class=\"token punctuation\">:</span> <span class=\"token function\">PersonId</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ccc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token punctuation\">:</span> <span class=\"token string\">'ccc'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getPersonById</span><span class=\"token punctuation\">(</span><span class=\"token function\">PersonId</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bbb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getPersonById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bbb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>발표자료에 있던 코드를 거의 그대로 들고왔다.</p>\n<p><code class=\"language-text\">PersonId</code>는 단순 <code class=\"language-text\">string</code>이지만 <code class=\"language-text\">unique symbol</code>로 intersection을 걸어서 만들어졌기 때문에 <code class=\"language-text\">string</code>을 그대로 전달할 수 없다.</p>\n<p>명확하게 이해는 되지만 어디에 써먹을 수 있을까 알쏭달쏭하다.</p>\n<p>이렇게나 강하게 타입을 강제해야하는 상황이 있을까?</p>\n<h3 id=\"function\"><a href=\"#function\" aria-label=\"function permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>function</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// type alias</span>\n<span class=\"token keyword\">type</span> <span class=\"token function-variable function\">EatType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">food<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// interface</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Eat</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span>food<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"array\"><a href=\"#array\" aria-label=\"array permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>array</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// type alias</span>\n<span class=\"token keyword\">type</span> PersonList <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// interface</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersionList</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">type</code>은 단순히 alias라고 생각해도 좋다고 발표자님이 얘기하신 것이 기억난다.</p>\n<p>function, array를 <code class=\"language-text\">interface</code>에서 사용하는 법은 종종 잊어먹는다. 잘 기억해두자.</p>\n<h3 id=\"intersection\"><a href=\"#intersection\" aria-label=\"intersection permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>intersection</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ErrorHandling</span> <span class=\"token punctuation\">{</span>\n  success<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  error<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> message<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ArtistsData</span> <span class=\"token punctuation\">{</span>\n  artists<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// type alias</span>\n<span class=\"token keyword\">type</span> ArtistsResponseType <span class=\"token operator\">=</span> ArtistsData <span class=\"token operator\">&amp;</span> ErrorHandling<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> art<span class=\"token punctuation\">:</span> ArtistsResponseType<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// interface</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ArtistRespose</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ArtistsData</span><span class=\"token punctuation\">,</span> ErrorHandling <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> art<span class=\"token punctuation\">:</span> ArtistsResponse<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">type</code>은 에러와 데이터를 intersection으로 엮어서 새로운 타입을 만들었다.</p>\n<p><code class=\"language-text\">interface</code>는 <code class=\"language-text\">extends</code>를 이용하여 두 에러와 데이터를 엮었다.</p>\n<p>이건 잘 써먹을 수 있을 것 같다!</p>\n<h3 id=\"declaration-merging---interface\"><a href=\"#declaration-merging---interface\" aria-label=\"declaration merging   interface permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Declaration Merging - interface</h3>\n<p><code class=\"language-text\">interface</code>를 동일한 이름으로 선언하면 각 프로퍼티들은 하나의 <code class=\"language-text\">interface</code>에서 선언한 것 처럼 합쳐진다.</p>\n<p>라이브러리에서 타일을 부실하게 적어놨을 경우 활용할 수 있다.</p>\n<p><code class=\"language-text\">type</code>은 중복 선언되면 에러가 발생한다.</p>\n<hr>\n<h3 id=\"5-type-guard로-안전함을-파악하기\"><a href=\"#5-type-guard%EB%A1%9C-%EC%95%88%EC%A0%84%ED%95%A8%EC%9D%84-%ED%8C%8C%EC%95%85%ED%95%98%EA%B8%B0\" aria-label=\"5 type guard로 안전함을 파악하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Type Guard로 안전함을 파악하기</h3>\n<h3 id=\"5-1-typeof-type-guard---보통-primitive-타입일-경우-많이-사용된다\"><a href=\"#5-1-typeof-type-guard---%EB%B3%B4%ED%86%B5-primitive-%ED%83%80%EC%9E%85%EC%9D%BC-%EA%B2%BD%EC%9A%B0-%EB%A7%8E%EC%9D%B4-%EC%82%AC%EC%9A%A9%EB%90%9C%EB%8B%A4\" aria-label=\"5 1 typeof type guard   보통 primitive 타입일 경우 많이 사용된다 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5-1 typeof Type Guard - 보통 primitive 타입일 경우 많이 사용된다.</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">getNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"5-2-instanceof-type-guard---error-객체-구분에-많이-쓰인다\"><a href=\"#5-2-instanceof-type-guard---error-%EA%B0%9D%EC%B2%B4-%EA%B5%AC%EB%B6%84%EC%97%90-%EB%A7%8E%EC%9D%B4-%EC%93%B0%EC%9D%B8%EB%8B%A4\" aria-label=\"5 2 instanceof type guard   error 객체 구분에 많이 쓰인다 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5-2 instanceof Type Guard - Error 객체 구분에 많이 쓰인다.</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NegativeNumberError</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Error</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> NegativeNumberError <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NegativeNumberError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token function\">getNumber</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">NegativeNumberError</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"5-3-in-operator-type-guard---object의-프로퍼티-유무로-처리하는-경우\"><a href=\"#5-3-in-operator-type-guard---object%EC%9D%98-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%9C%A0%EB%AC%B4%EB%A1%9C-%EC%B2%98%EB%A6%AC%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"5 3 in operator type guard   object의 프로퍼티 유무로 처리하는 경우 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5-3 in operator Type Guard - object의 프로퍼티 유무로 처리하는 경우</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Admin</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  role<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  email<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user<span class=\"token punctuation\">:</span> Admin <span class=\"token operator\">|</span> User</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"role\"</span> <span class=\"token keyword\">in</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">routeToAdminPage</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>role<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">routeToHomePage</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"5-4-literal-type-guard---object의-프로퍼티가-같고-타입이-다른-경우\"><a href=\"#5-4-literal-type-guard---object%EC%9D%98-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%EA%B0%80-%EA%B0%99%EA%B3%A0-%ED%83%80%EC%9E%85%EC%9D%B4-%EB%8B%A4%EB%A5%B8-%EA%B2%BD%EC%9A%B0\" aria-label=\"5 4 literal type guard   object의 프로퍼티가 같고 타입이 다른 경우 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5-4 literal Type Guard - object의 프로퍼티가 같고, 타입이 다른 경우</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Car <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'CAR'</span><span class=\"token punctuation\">;</span>\n  wheel<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Boat <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'BOAT'</span><span class=\"token punctuation\">;</span>\n  motor<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getWheelOrMotor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">machine<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>machine<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'CAR'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> machine<span class=\"token punctuation\">.</span>wheel<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>machine<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'BOAT'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> machine<span class=\"token punctuation\">.</span>motor<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> carData<span class=\"token punctuation\">:</span> Car <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'CAR'</span><span class=\"token punctuation\">,</span>\n  wheel<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getWheelOrMotor</span><span class=\"token punctuation\">(</span>carData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"5-5-custom-type-guard\"><a href=\"#5-5-custom-type-guard\" aria-label=\"5 5 custom type guard permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5-5 custom Type Guard</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Car <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'CAR'</span><span class=\"token punctuation\">;</span>\n  wheel<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Boat <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'BOAT'</span><span class=\"token punctuation\">;</span>\n  motor<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isCar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> arg <span class=\"token keyword\">is</span> Car <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'CAR'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isBoat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> arg <span class=\"token keyword\">is</span> Boat <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'BOAT'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getWheelOrMotor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">machine<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isCar</span><span class=\"token punctuation\">(</span>machine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> machine<span class=\"token punctuation\">.</span>wheel<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isBoat</span><span class=\"token punctuation\">(</span>machine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> machine<span class=\"token punctuation\">.</span>motor<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> carData<span class=\"token punctuation\">:</span> Car <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'CAR'</span><span class=\"token punctuation\">,</span>\n  wheel<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getWheelOrMotor</span><span class=\"token punctuation\">(</span>carData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Type Guard는 어떻게 엮어서 사용하던지 매우 유용하게 사용할 수 있을 듯 하다.</p>\n<p>어렴풋하게 알고 있었던 내용을 정리할 수 있어서 좋았고, 부가 설명에 적힌대로 에러 처리를 할 때 유용하게 쓸 수 있을 것 같다!</p>\n<hr>\n<h3 id=\"6-class를-안전하게-만들기\"><a href=\"#6-class%EB%A5%BC-%EC%95%88%EC%A0%84%ED%95%98%EA%B2%8C-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"6 class를 안전하게 만들기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Class를 안전하게 만들기</h3>\n<blockquote>\n<p>Class Property의 타입을 명시적으로 지정해야 한다.</p>\n<p>런타임에 undefined가 된다.</p>\n<p>strictPropertyInitalization</p>\n<p>Class Property가 선언에서 초기화되어야 한다. or Class property가 생성자에서 초기화한다.</p>\n<p>4.0.2부터 생성자에 의해 Class Property의 타입이 추론된다.</p>\n<p>생성자를 벗어나면 추론되지 않는다.</p>\n<p><code class=\"language-text\">!</code>로 의도를 표현해야 한다. - 주의하라는 표시라고 이해해도 좋다.</p>\n</blockquote>\n<p>요건 간단하게만 정리!</p>\n<h2 id=\"정리\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>1부 내용만 일단 간단하게 정리해봤다. 사용된 코드는 발표 자료에 있는 코드를 거의 그대로 사용했다.</p>\n<p>2부는 <code class=\"language-text\">실전 타입스크립트 코드 작성하기</code> 인데 1부보다 훨씬 더 어려웠다. 그래도 내 수준에서도 유용한 내용이 많아서 꼭 다시 리뷰해보려고 한다.</p>\n<p>오늘은 여기까지만!</p>\n<p>정리한 내용에 오류가 있을 수도 있으니 혹시라도 읽는 분이 있다면 유튜브나 <a href=\"https://slides.com/woongjae/woowahan-ts\">원본 슬라이드</a>를 참고하세요.</p>","frontmatter":{"title":"우아한 타입스크립트 #1","date":"August 27, 2020"}}},"pageContext":{"slug":"/development/2020-08-27-woowahan-typescript-1/","previous":{"fields":{"slug":"/til/2020-08-08-wil/"},"frontmatter":{"title":"2020-08-08 WIL","category":"til"}},"next":{"fields":{"slug":"/development/2020-10-12-node-review-01/"},"frontmatter":{"title":"Node.js - Express 복습","category":"development"}}}}}