{"componentChunkName":"component---src-templates-blog-post-js","path":"/development/2020-03-26-extend-express-request-type-in-typescript/","result":{"data":{"site":{"siteMetadata":{"title":"TIL","author":"[Suho]","siteUrl":"https://blog.doitreviews.com","comment":{"disqusShortName":"","utterances":"angelxtry/blog-comment"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"8ee2a9fe-11cc-5324-9ea7-c6dc1f684e37","excerpt":"문제점 Apollo-server-express로 서버를 만들고 있다. 인증 부분을 다음과 같이 작성했다. req.user 에서 다음과 같은 에러가 발생한다. Request에 정의되어 있지 않은 user라는 property를 임의로 추가했기 때문에 발생하는 에러다. 예전에는 req를 any로 설정하고 넘어갔었는데, 이번에는 any를 최대한 사용하지 않고 싶었다. 해결방안 검색해보니 작성되어 있는 type을 확장할 수 있는 방법이 있었다. src/types/express.d.ts…","html":"<h2 id=\"문제점\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제점</h2>\n<p>Apollo-server-express로 서버를 만들고 있다.</p>\n<p>인증 부분을 다음과 같이 작성했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> authMiddleware <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>\n  req<span class=\"token operator\">:</span> express<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">,</span>\n  _<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">,</span>\n  next<span class=\"token operator\">:</span> express<span class=\"token punctuation\">.</span>NextFunction\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'H-TOKEN'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">decodeJWT</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      req<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      req<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>authMiddleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>req.user 에서 다음과 같은 에러가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">Property <span class=\"token string\">'user'</span> does not exist on <span class=\"token keyword\">type</span> <span class=\"token string\">'Request'</span><span class=\"token punctuation\">.</span><span class=\"token function\">ts</span><span class=\"token punctuation\">(</span><span class=\"token number\">2339</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Request에 정의되어 있지 않은 user라는 property를 임의로 추가했기 때문에 발생하는 에러다.</p>\n<p>예전에는 req를 any로 설정하고 넘어갔었는데, 이번에는 any를 최대한 사용하지 않고 싶었다.</p>\n<h2 id=\"해결방안\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0%EB%B0%A9%EC%95%88\" aria-label=\"해결방안 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결방안</h2>\n<p>검색해보니 작성되어 있는 type을 확장할 수 있는 방법이 있었다.</p>\n<p>src/types/express.d.ts 파일을 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">declare</span> global <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">namespace</span> Express <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Request</span> <span class=\"token punctuation\">{</span>\n      user<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../entities/User'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고 tsconfig.json 파일에 다음 항목을 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"typeRoots\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"./src/types\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"./node_modules/@types\"</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h2 id=\"삽질-포인트\" style=\"position:relative;\"><a href=\"#%EC%82%BD%EC%A7%88-%ED%8F%AC%EC%9D%B8%ED%8A%B8\" aria-label=\"삽질 포인트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>삽질 포인트</h2>\n<p>src/types/express.d.ts 파일을 작성하면서 시행착오를 많이 겪었다.</p>\n<p>대부분의 검색 결과가 다음과 같았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> User <span class=\"token keyword\">from</span> <span class=\"token string\">'../../entities/User'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">declare</span> global <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">namespace</span> Express <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Request</span> <span class=\"token punctuation\">{</span>\n      user<span class=\"token operator\">:</span> User<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>해결방안의 코드와 다른 점은 첫 줄의 <code class=\"language-text\">export {}</code>와 User type을 import 하는 방식, 2가지다.</p>\n<p>global 객체를 확장할 때, 첫 줄의 <code class=\"language-text\">export {}</code>가 external module로 만들어 주는 역할을 한다.</p>\n<p>그리고 global을 사용할 경우 User를 import 할 수 없게 된다. 이럴 때는 interface 안에서 바로 import를 하는 방식을 사용한다.</p>","frontmatter":{"title":"Express Request 확장하기(TypeScript)","date":"March 26, 2020"}}},"pageContext":{"slug":"/development/2020-03-26-extend-express-request-type-in-typescript/","previous":{"fields":{"slug":"/til/2020-03-25-til/"},"frontmatter":{"title":"2020-03-25 TIL","category":"til"}},"next":{"fields":{"slug":"/development/2020-03-26-using-path-alias-in-typescript-2/"},"frontmatter":{"title":"Path alias를 사용하여 TypeScript import 경로 깔끔하게 만들기 2","category":"development"}}}},"staticQueryHashes":["1763525275","3128451518"]}