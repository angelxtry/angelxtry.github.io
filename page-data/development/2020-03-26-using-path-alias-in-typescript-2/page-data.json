{"componentChunkName":"component---src-templates-blog-post-js","path":"/development/2020-03-26-using-path-alias-in-typescript-2/","result":{"data":{"site":{"siteMetadata":{"title":"TIL","author":"[Suho]","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"angelxtry/blog-comment"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"28edfa27-c7d1-54a5-bf28-d1a20bb91966","excerpt":"음… 이게 시리즈가 될 줄은 몰랐는데 어쩌다보니 2편을 쓰게 됐다. 1편은 여기를 참조하자. Path alias를 사용하여 TypeScript import 경로 깔끔하게 만들기 발단 지난 번에 Path alias를 적용해서 import 경로를 깔끔하게 만드는 것은 성공했다. 거기서 더 발전시키지는 않고 딱 그 수준으로 개발을 진행하다보니 불편한 점이 많았다. 일단 package.json을 보자. \u001bwatch에 ts, graphql…","html":"<p>음… 이게 시리즈가 될 줄은 몰랐는데 어쩌다보니 2편을 쓰게 됐다.</p>\n<p>1편은 여기를 참조하자.</p>\n<p><a href=\"https://blog.doitreviews.com/development/2020-03-04-using-path-alias-in-typescript/\">Path alias를 사용하여 TypeScript import 경로 깔끔하게 만들기</a></p>\n<h2 id=\"발단\"><a href=\"#%EB%B0%9C%EB%8B%A8\" aria-label=\"발단 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>발단</h2>\n<p>지난 번에 Path alias를 적용해서 import 경로를 깔끔하게 만드는 것은 성공했다.</p>\n<p>거기서 더 발전시키지는 않고 딱 그 수준으로 개발을 진행하다보니 불편한 점이 많았다.</p>\n<p>일단 package.json을 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"prebuild\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rm -rf dist\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"postbuild\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cd src &amp;&amp; copy ./api/**/*.graphql ../dist/api\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NODE_ENV=development node dist/index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"watch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon --exec \\\"yarn build &amp;&amp; yarn dev\\\" --watch src -e ts,graphql\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"codegen\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"graphql-codegen --config ./codegen.yml\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>\u001bwatch에 ts, graphql 확장자를 걸어놔서 해당 확장자 파일이 수정되면 자동으로 재시작되는 것은 좋은데, 나머지 잡다한 일들이 줄줄이 실행되고 있었다.</p>\n<h2 id=\"방법-찾기\"><a href=\"#%EB%B0%A9%EB%B2%95-%EC%B0%BE%EA%B8%B0\" aria-label=\"방법 찾기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>방법 찾기</h2>\n<p>이전처럼 개발 시에는 ts-node를 이용하여 실행하고 싶었지만 path alias와 <a href=\"https://blog.doitreviews.com/development/2020-03-26-extend-express-request-type-in-typescript/\">Express의 Request 확장</a>으로 인해 에러가 발생했다.</p>\n<p>그래서 검색.</p>\n<p>멋진 선배님의 좋은 글을 발견!</p>\n<p><a href=\"https://libsora.so/posts/use-absolute-path-in-typescript/\">타입스크립트에서 절대경로 쓰기</a></p>\n<p>딱 내가 찾던 그 부분이 있었다.</p>\n<p>tsconfig-paths란 package를 설치하면 매번 tsconfig.json을 참조하여 ts-node를 실행하기 때문에 path alias 같은 문제를 다 해결할 수 있다고 한다.</p>\n<p><a href=\"https://github.com/TypeStrong/ts-node#loading-tsconfigjson\">ts-node Loading tsconfig.json</a></p>\n<p><a href=\"https://www.npmjs.com/package/tsconfig-paths#how-to-use\">tsconfig-paths how to use</a></p>\n<h2 id=\"적용\"><a href=\"#%EC%A0%81%EC%9A%A9\" aria-label=\"적용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>적용</h2>\n<p>package.json의 script를 다음과 같이 변경했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"prebuild\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rm -rf dist\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"postbuild\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cd src &amp;&amp; copy ./api/**/*.graphql ../dist/api\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn build &amp;&amp; NODE_ENV=production node dist/index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"watch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NODE_ENV=development nodemon --exec ts-node -r tsconfig-paths/register --files src/index.ts -e ts,graphql\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"codegen\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"graphql-codegen --config ./codegen.yml\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>dev와 start를 실행하면 build 실행 후 index.js가 실행되도록 수정했다.</p>\n<p>watch는 nodemon과 함께 ts-node로 실행되도록 만들었다.</p>\n<h2 id=\"이상한-점\"><a href=\"#%EC%9D%B4%EC%83%81%ED%95%9C-%EC%A0%90\" aria-label=\"이상한 점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이상한 점</h2>\n<p>음? tsconfig-paths를 설치했던가? 안했던 것 같은데?</p>\n<p>node_modules 폴더를 뒤져보니 이미 설치되어 있었다. 어떻게 엮여서 설치가 되었을까?</p>\n<p>yarn why로 확인해봤다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">$ yarn why tsconfig<span class=\"token operator\">-</span>paths\nyarn why v1<span class=\"token punctuation\">.</span><span class=\"token number\">22.0</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> 🤔  Why <span class=\"token keyword\">do</span> we have the <span class=\"token keyword\">module</span> <span class=\"token string\">\"tsconfig-paths\"</span><span class=\"token operator\">...</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> 🚚  Initialising dependency graph<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> 🔍  Finding dependency<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> 🚡  Calculating file sizes<span class=\"token operator\">...</span>\n<span class=\"token operator\">=></span> Found <span class=\"token string\">\"tsconfig-paths@3.9.0\"</span>\ninfo Reasons <span class=\"token keyword\">this</span> <span class=\"token keyword\">module</span> exists\n   <span class=\"token operator\">-</span> <span class=\"token string\">\"eslint-import-resolver-typescript\"</span> depends on it\n   <span class=\"token operator\">-</span> Hoisted <span class=\"token keyword\">from</span> <span class=\"token string\">\"eslint-import-resolver-typescript#tsconfig-paths\"</span>\ninfo Disk size without dependencies<span class=\"token punctuation\">:</span> <span class=\"token string\">\"336KB\"</span>\ninfo Disk size <span class=\"token keyword\">with</span> unique dependencies<span class=\"token punctuation\">:</span> <span class=\"token string\">\"752KB\"</span>\ninfo Disk size <span class=\"token keyword\">with</span> transitive dependencies<span class=\"token punctuation\">:</span> <span class=\"token string\">\"752KB\"</span>\ninfo Number <span class=\"token keyword\">of</span> shared dependencies<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span></code></pre></div>\n<p>아. eslint-import-resolver-typescript를 설치할 때 같이 설치됐구나.</p>\n<h2 id=\"결론\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p>개발 시점에 재컴파일 되는 과정이 단순해져서 마음에 든다.</p>\n<p><a href=\"https://libsora.so/posts/use-absolute-path-in-typescript/\">타입스크립트에서 절대경로 쓰기</a>를 읽다보니 jest도 언급되던데 조만간 적용하게 될 것 같다.</p>\n<h2 id=\"오류수정\"><a href=\"#%EC%98%A4%EB%A5%98%EC%88%98%EC%A0%95\" aria-label=\"오류수정 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류수정</h2>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"prebuild\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rm -rf dist\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"postbuild\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cd src &amp;&amp; copy ./api/**/*.graphql ../dist/api\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NODE_ENV=production yarn build &amp;&amp; node dist/index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"watch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NODE_ENV=development nodemon --exec ts-node -r tsconfig-paths/register --files src/index.ts -e ts,graphql\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"codegen\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"graphql-codegen --config ./codegen.yml\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n```\u001b\n\nstart와 watch가 모두 잘 동작한다고 생각하고 있었는데 아니었다.\n\nmodule-alias 설정 중에 package.json 파일에 다음과 같은 내용을 추가하는 과정이 있었다.\n\n```json\n<span class=\"token property\">\"_moduleAliases\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"@src\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>이 구문 때문에 watch를 실행해도 @src를 src가 아니라 dist로 변환하여 검색한다. NODE_ENV로 분기하는 로직을 추가하고 싶은데 방법을 잘 모르겠다. ㅠㅠ</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"_moduleAliases\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"@src\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"src\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>결국 이렇게 고쳐놓고 yarn watch를 실행하여 개발중이다.</p>","frontmatter":{"title":"Path alias를 사용하여 TypeScript import 경로 깔끔하게 만들기 2","date":"March 26, 2020"}}},"pageContext":{"slug":"/development/2020-03-26-using-path-alias-in-typescript-2/","previous":{"fields":{"slug":"/development/2020-03-26-extend-express-request-type-in-typescript/"},"frontmatter":{"title":"Express Request 확장하기(TypeScript)","category":"development"}},"next":{"fields":{"slug":"/til/2020-03-27-til/"},"frontmatter":{"title":"2020-03-27 TIL","category":"til"}}}}}