{"componentChunkName":"component---src-templates-blog-post-js","path":"/development/2019-11-27-Utc-data-lookup-by-local-date/","result":{"data":{"site":{"siteMetadata":{"title":"TIL","author":"[Suho]","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"angelxtry/blog-comment"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"42636bdc-b274-50a7-abf4-2b0884c179b2","excerpt":"별 고민 없이 timestamp를 DB에 저장하고 특정 날짜로 데이터를 조회하다가 문제가 발생했다. 문제의 원인은 timestamp를 utc 또는 local 기준으로 사용한다는 명확한 방침이 없었기 때문이다. 원인분석 문제의 원인을 좀 더 상세히 살펴보자. 이번 프로젝트는 DB는 MySQL, ORM은 sequelize 그리고 moment를 사용했다. 1.moment client에서 moment()를 호출하는 것과 서버에서 moment()를 호출하는 것이 다른 값이 나왔다. client…","html":"<p>별 고민 없이 timestamp를 DB에 저장하고 특정 날짜로 데이터를 조회하다가 문제가 발생했다.</p>\n<p>문제의 원인은 timestamp를 utc 또는 local 기준으로 사용한다는 명확한 방침이 없었기 때문이다.</p>\n<h2 id=\"원인분석\"><a href=\"#%EC%9B%90%EC%9D%B8%EB%B6%84%EC%84%9D\" aria-label=\"원인분석 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>원인분석</h2>\n<p>문제의 원인을 좀 더 상세히 살펴보자.</p>\n<p>이번 프로젝트는 DB는 MySQL, ORM은 sequelize 그리고 moment를 사용했다.</p>\n<p>1.moment</p>\n<p>client에서 moment()를 호출하는 것과 서버에서 moment()를 호출하는 것이 다른 값이 나왔다.</p>\n<p>client와 server에 설정된 timezone이 달라서 발생하는 문제다.</p>\n<p>2.MySQL</p>\n<p>timestamp 컬럼에 timezone을 표현할 수 있는 값이 포함되지 않는다.</p>\n<p>moment().fomat()을 출력해보면 <code class=\"language-text\">2019-11-27T20:05:05+09:00</code>와 같이 출력된다.</p>\n<p><code class=\"language-text\">+09:00</code>으로 timezone을 유추할 수 있다.</p>\n<p>하지만 MySQL에는 <code class=\"language-text\">2019-11-27 20:05:05</code>와 같은 형식으로 timestamp가 저장된다.</p>\n<p>그러므로 MySQL에 저장된 값만으로는 timezone을 판단하기 어렵다.</p>\n<h2 id=\"해결방안\"><a href=\"#%ED%95%B4%EA%B2%B0%EB%B0%A9%EC%95%88\" aria-label=\"해결방안 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결방안</h2>\n<p>이 문제를 해결하기 위해 기준을 설정했다.</p>\n<p>1.client에서 서버로 보내는 모든 timestamp는 UTC로 한다.</p>\n<p>그러므로 DB에 저장되어 있는 모든 timestamp는 UTC라고 간주한다.</p>\n<p>2.client에서 DB 데이터를 날짜로 검색하기 위해 <code class=\"language-text\">YYYY-MM-DD</code> 형식으로 서버에 데이터를 보낼 경우 해당 날짜를 UTC로 변환하여 검색한다.</p>\n<h2 id=\"적용\"><a href=\"#%EC%A0%81%EC%9A%A9\" aria-label=\"적용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>적용</h2>\n<p>1.client에서 서버로 보내는 모든 timestamp를 다음과 같이 수정했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> timestamp <span class=\"token operator\">=</span> <span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">utc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그리고 서버에서 timestamp를 받으면 local로 변환하여 사용했다.</p>\n<p>2.날짜로 검색하기 위해 local date(YYYY-MM-DD 형식)를 받으면 다음과 같이 변환한 값을 이용하여 데이터를 검색했다.</p>\n<p>검색을 위해 날짜를 인자로 전달할 때는 다음과 같이 작성했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">await</span> <span class=\"token function\">getDataByDate</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">startOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'day'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">local</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>monent()를 호출하면 <code class=\"language-text\">2019-11-27T20:05:05+09:00</code> 이런 형식의 데이터가 나온다.</p>\n<p>이 timestamp를 utc로 변환하는 과정에서 시간 때문에 오류가 발생할 수도 있으므로 <code class=\"language-text\">startOf(&#39;day&#39;)</code>를 넣어서 <code class=\"language-text\">2019-11-27T00:00:00+09:00</code>으로 변경한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> utcFrom <span class=\"token operator\">=</span> <span class=\"token function\">moment</span><span class=\"token punctuation\">(</span>localDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">utc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> utcTo <span class=\"token operator\">=</span> utcFrom<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>localDate가 <code class=\"language-text\">2019-11-27T00:00:00+09:00</code> 일때</p>\n<p>utcFrom <code class=\"language-text\">2019-11-26T15:00:00Z</code></p>\n<p>utcTo <code class=\"language-text\">2019-11-27T15:00:00Z</code> 가 된다.</p>\n<p>sequelize로 데이터를 조회하기 위해 다음과 같이 코드를 작성했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Op <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Sequelize<span class=\"token punctuation\">.</span>Op<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span>Utc<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  where<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    utcTime<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">[</span>Op<span class=\"token punctuation\">.</span>gte<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> utcFrom<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span>Op<span class=\"token punctuation\">.</span>lt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> utcTo<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  attributes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'utcTime'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'localTime'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  raw<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>localDate가 2019-11-26일 때 sequelize는 다음과 같은 query로 변환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token punctuation\">`</span>utcTime<span class=\"token punctuation\">`</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">`</span>localTime<span class=\"token punctuation\">`</span>\n<span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">`</span>utcs<span class=\"token punctuation\">`</span> <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">`</span>utc<span class=\"token punctuation\">`</span>\n<span class=\"token keyword\">WHERE</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">`</span>utc<span class=\"token punctuation\">`</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>utcTime<span class=\"token punctuation\">`</span> <span class=\"token operator\">>=</span> <span class=\"token string\">'2019-11-25 15:00:00'</span>\n  <span class=\"token operator\">AND</span> <span class=\"token punctuation\">`</span>utc<span class=\"token punctuation\">`</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>utcTime<span class=\"token punctuation\">`</span> <span class=\"token operator\">&lt;</span> <span class=\"token string\">'2019-11-26 15:00:00'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">raw: true</code>는 query의 결과를 sequelize object가 아닌 일반 데이터 객체로 만든다.</p>\n<h2 id=\"배운-것\"><a href=\"#%EB%B0%B0%EC%9A%B4-%EA%B2%83\" aria-label=\"배운 것 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배운 것</h2>\n<p>날짜나 timestamp를 사용할 때는 한 번 더 생각하자.</p>\n<p>MySQL, moment의 사용법에 대해 좀 더 알게됐다.</p>\n<p>테스트한 코드는 다음과 같다.</p>\n<p><a href=\"https://github.com/angelxtry/Utc-data-lookup-by-local-date\">https://github.com/angelxtry/Utc-data-lookup-by-local-date</a></p>","frontmatter":{"title":"UTC로 저장된 데이터를 Local Date로 조회하기","date":"November 27, 2019"}}},"pageContext":{"slug":"/development/2019-11-27-Utc-data-lookup-by-local-date/","previous":{"fields":{"slug":"/til/2019-11-22-react-helmet-nextjs/"},"frontmatter":{"title":"Next.js에 react-helmet 적용","category":"TIL"}},"next":{"fields":{"slug":"/til/2019-11-27-TIL-2019-11-27/"},"frontmatter":{"title":"[TIL] 2019-11-27","category":"TIL"}}}}}