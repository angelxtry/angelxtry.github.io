{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/2020-02-10-longest-palindrome/","result":{"data":{"site":{"siteMetadata":{"title":"TIL","author":"[Suho]","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"angelxtry/blog-comment"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"a812f5f4-ce08-5cce-82ea-27be4efa7f12","excerpt":"Palindrome. 회문이라고 번역한다. 토마토같이 가운데를 중심으로 좌우가 동일할 글자를 의미한다. 토마마토 처럼 짝수인 경우도 해당한다. 주어진 문자열에서 가장 긴 Palindrome을 찾는 것이 문제다. 일단 for loop으로 풀었다. 시간 복잡도는  는 말 그대로 중앙에서 좌우로 확장하면서 동일한 값인지 확인한다. 처음 호출한 expandAroundCenter는 palindrome이 홀수인 경우, 두 번째 호출한 것은 palindrome이 짝수인 경우를 확인한다. 은 , 은 다. mdn…","html":"<p>Palindrome. 회문이라고 번역한다.</p>\n<p>토마토같이 가운데를 중심으로 좌우가 동일할 글자를 의미한다.</p>\n<p>토마마토 처럼 짝수인 경우도 해당한다.</p>\n<p>주어진 문자열에서 가장 긴 Palindrome을 찾는 것이 문제다.</p>\n<p>일단 for loop으로 풀었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">expandAroundCenter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> l <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> r <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> str<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    l <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    r <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> r <span class=\"token operator\">-</span> l <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">longestPalindrome</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">str</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>str<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> maxLength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> oddLength <span class=\"token operator\">=</span> <span class=\"token function\">expandAroundCenter</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> evenLength <span class=\"token operator\">=</span> <span class=\"token function\">expandAroundCenter</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>oddLength<span class=\"token punctuation\">,</span> evenLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">></span> maxLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      maxLength <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n      start <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// return str.substr(start, maxLength);</span>\n  <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> start <span class=\"token operator\">+</span> maxLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>시간 복잡도는 <code class=\"language-text\">O(n^2)</code></p>\n<p><code class=\"language-text\">expandAroundCenter</code>는 말 그대로 중앙에서 좌우로 확장하면서 동일한 값인지 확인한다. 처음 호출한 expandAroundCenter는 palindrome이 홀수인 경우, 두 번째 호출한 것은 palindrome이 짝수인 경우를 확인한다.</p>\n<p><code class=\"language-text\">substr</code>은 <code class=\"language-text\">(startIndex, length)</code>, <code class=\"language-text\">substring</code>은 <code class=\"language-text\">(startIndex, endIndex)</code>다.</p>\n<p>mdn에 보면 substr보다 substring을 사용하라고 권장한다. 그래서 substring으로 처리했다.</p>","frontmatter":{"title":"Longest Palindrome - Expand Around Center","date":"February 10, 2020"}}},"pageContext":{"slug":"/algorithm/2020-02-10-longest-palindrome/","previous":{"fields":{"slug":"/blog/2020-02-07-end-of-project/"},"frontmatter":{"title":"2020-02-07 프로젝트 발표를 앞두고","category":"blog"}},"next":{"fields":{"slug":"/algorithm/2020-02-12-allanagrams/"},"frontmatter":{"title":"All Anagrams","category":"algorithm"}}}},"staticQueryHashes":["3128451518","96099027"]}