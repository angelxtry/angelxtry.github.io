{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/2020-02-12-allanagrams/","result":{"data":{"site":{"siteMetadata":{"title":"TIL","author":"[Suho]","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"angelxtry/blog-comment"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"12aa2620-b729-5c7c-9f27-51aad8c2e248","excerpt":"문자열이 주어지면 주어진 문자와 동일한 길이의 anagram을 구하는 문제다. 재귀를 사용했다. 재귀함수의 첫 번째 인자가 null이면 주어진 문자열을 모두 사용했다는 의미가 되므로 anagrams 배열에 anagram을 넣는다. 재귀한수 내의 for loop에서 다시 재귀함수를 호출할 때 문자열의 알파벳이 하나씩 제거되면서 전달된다. 시간복잡도는  내일 복습하면서 한번 다시 풀어보자.","html":"<p>문자열이 주어지면 주어진 문자와 동일한 길이의 anagram을 구하는 문제다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">allAnagrams</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token builtin\">string</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> anagrams<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> recur <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> anagram <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      anagrams<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>anagram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      anagram <span class=\"token operator\">+=</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">recur</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> anagram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      anagram <span class=\"token operator\">=</span> anagram<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> anagram<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">recur</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>anagrams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">allAnagrams</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ABC'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>재귀를 사용했다.</p>\n<p>재귀함수의 첫 번째 인자가 null이면 주어진 문자열을 모두 사용했다는 의미가 되므로 anagrams 배열에 anagram을 넣는다.</p>\n<p>재귀한수 내의 for loop에서 다시 재귀함수를 호출할 때 문자열의 알파벳이 하나씩 제거되면서 전달된다.</p>\n<p>시간복잡도는 <code class=\"language-text\">O(n * n!)</code></p>\n<p>내일 복습하면서 한번 다시 풀어보자.</p>","frontmatter":{"title":"All Anagrams","date":"February 12, 2020"}}},"pageContext":{"slug":"/algorithm/2020-02-12-allanagrams/","previous":{"fields":{"slug":"/algorithm/2020-02-10-longest-palindrome/"},"frontmatter":{"title":"Longest Palindrome - Expand Around Center","category":"algorithm"}},"next":{"fields":{"slug":"/til/2020-02-11-til/"},"frontmatter":{"title":"2020-02-11 TIL","category":"til"}}}}}