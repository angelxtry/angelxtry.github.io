{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/2020-02-13-shuffle-cards/","result":{"data":{"site":{"siteMetadata":{"title":"TIL","author":"[Suho]","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"angelxtry/blog-comment"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"6ad8f996-abed-5af1-86ea-f4ac8f848522","excerpt":"카드 덱을 랜덤하게 섞는 문제. splice로 수월하게 해결했다. 너무 수월하게 풀려서 좀 찜찜했다. 내가 모르는 뭔가가 있을 것 같아 검색을 해봤다. 찾아보니 Fisher–Yates Shuffle이라는 알고리즘 이었다. 1 새로운 배열을 만들고 2 기존 배열에서 랜덤하게 카드를 뽑아서(기존 배열에서 제거) 3 새로운 배열에 저장한다. 계속 기존 배열의 길이를 확인하는 것이 O(n), 카드를 뽑아서 새로운 배열에 넣는 것이 O(n) 결국 시간 복잡도는  이 코드가 더 효과적인 shuffle…","html":"<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> orderedDeck <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> suits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'H'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'S'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'6'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'7'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'8'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'9'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'10'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'11'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'12'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'13'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> deck<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  suits<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    values<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      deck<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>s<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> deck<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> shuffleDect <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>deck<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> deckLength <span class=\"token operator\">=</span> deck<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> deckLength<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> chosen <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> deck<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>deck<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>chosen<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">shuffleDect</span><span class=\"token punctuation\">(</span><span class=\"token function\">orderedDeck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>카드 덱을 랜덤하게 섞는 문제. splice로 수월하게 해결했다.</p>\n<p>너무 수월하게 풀려서 좀 찜찜했다. 내가 모르는 뭔가가 있을 것 같아 검색을 해봤다.</p>\n<p>찾아보니 Fisher–Yates Shuffle이라는 알고리즘 이었다.</p>\n<p>1 새로운 배열을 만들고</p>\n<p>2 기존 배열에서 랜덤하게 카드를 뽑아서(기존 배열에서 제거)</p>\n<p>3 새로운 배열에 저장한다.</p>\n<p>계속 기존 배열의 길이를 확인하는 것이 O(n), 카드를 뽑아서 새로운 배열에 넣는 것이 O(n)</p>\n<p>결국 시간 복잡도는 <code class=\"language-text\">O(n^2)</code></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">shuffleDeck</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>deck<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> deckLength <span class=\"token operator\">=</span> deck<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>deckLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> chosen <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> deckLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    deckLength <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> deck<span class=\"token punctuation\">[</span>chosen<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    deck<span class=\"token punctuation\">[</span>chosen<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> deck<span class=\"token punctuation\">[</span>deckLength<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    deck<span class=\"token punctuation\">[</span>deckLength<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> deck<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 코드가 더 효과적인 shuffle 알고리즘이라고 한다.</p>\n<p>랜덤으로 카드를 골라서 마지막 인덱스의 카드와 교체하고</p>\n<p>인덱스를 한 칸씩 앞으로 조정하면서 반복한다.</p>\n<p>시간 복잡도는 <code class=\"language-text\">O(n)</code>. 별도의 공간도 필요없다.</p>","frontmatter":{"title":"Shuffle Cards","date":"February 14, 2020"}}},"pageContext":{"slug":"/algorithm/2020-02-13-shuffle-cards/","previous":{"fields":{"slug":"/development/2020-02-12-vscode-typescript-debugging/"},"frontmatter":{"title":"VSCode Typescript Debugging","category":"development"}},"next":{"fields":{"slug":"/til/2020-02-13-til/"},"frontmatter":{"title":"2020-02-13 TIL","category":"til"}}}},"staticQueryHashes":["3128451518","96099027"]}